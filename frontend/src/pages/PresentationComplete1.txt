import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { feedbackService, isDemoMode, analyticsService, environmentService } from '../services/firebase';
import EnvironmentBanner from '../components/EnvironmentBanner';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
} from 'chart.js';
import { Line, Bar, Doughnut } from 'react-chartjs-2';
import './Presentation.css';

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement
);

interface DSAImplementation {
  title: string;
  description: string;
  realWorldUse: string[];
  code: string;
  execute: () => string;
}

interface DSAImplementations {
  [key: string]: DSAImplementation;
}

interface DatabaseImplementation {
  title: string;
  description: string;
  realWorldUse: string[];
  concepts: string[];
  demo: string;
}

const Presentation: React.FC = () => {
  const [activeTab, setActiveTab] = useState('overview');
  const [selectedCode, setSelectedCode] = useState<keyof DSAImplementations>('binarySearch');
  const [selectedDatabase, setSelectedDatabase] = useState('mongodb');
  const [codeOutput, setCodeOutput] = useState('');
  const [isRunning, setIsRunning] = useState(false);
  const [feedbackForm, setFeedbackForm] = useState({
    name: '',
    email: '',
    organization: '',
    role: '',
    experience: '',
    rating: 5,
    feedback: '',
    category: 'general',
    technicalLevel: '',
    improvements: '',
    recommendation: '',
    contactPermission: false
  });
  const [feedbackSubmitted, setFeedbackSubmitted] = useState(false);
  const [submitError, setSubmitError] = useState('');

  useEffect(() => {
    const envInfo = environmentService.getInfo();
    analyticsService.trackEvent('presentation_page_view', {
      tab: activeTab,
      isDemoMode,
      timestamp: new Date().toISOString()
    });
  }, [activeTab]);
