  const databaseImplementations = {
    mongodb: {
      title: '🍃 MongoDB - Aggregation & Analytics',
      description: 'Advanced healthcare data analytics with MongoDB pipelines',
      realWorldUse: [
        '📊 Patient cohort analysis - group by demographics, conditions',
        '💊 Drug efficacy studies - aggregate treatment outcomes',
        '🏥 Hospital performance metrics - real-time analytics dashboards',
        '📈 Predictive analytics - identify at-risk patients early'
      ],
      concepts: [
        'Aggregation Pipelines - $match, $group, $project, $lookup',
        'GridFS - Medical image storage (X-rays, MRIs, CT scans)',
        'Sharding - Horizontal scaling for 100M+ patient records',
        'Change Streams - Real-time data synchronization'
      ],
      demo: `=== MONGODB HEALTHCARE ANALYTICS ===

📊 Sample Patient Collection:
  { "_id": "P001", "age": 25, "condition": "Hypertension", "visits": 5 }
  { "_id": "P002", "age": 45, "condition": "Diabetes", "visits": 8 }
  { "_id": "P003", "age": 15, "condition": "Asthma", "visits": 3 }
  { "_id": "P004", "age": 70, "condition": "Heart Disease", "visits": 12 }
  { "_id": "P005", "age": 35, "condition": "Migraine", "visits": 4 }

🔍 Aggregation Pipeline Example:

db.patients.aggregate([
  // Stage 1: Match active patients (last 90 days)
  {
    $match: {
      status: "active",
      lastVisit: { $gte: ISODate("2024-10-01") }
    }
  },
  
  // Stage 2: Add computed age group field
  {
    $addFields: {
      ageGroup: {
        $switch: {
          branches: [
            { case: { $lt: ["$age", 18] }, then: "Child" },
            { case: { $lt: ["$age", 40] }, then: "Adult" },
            { case: { $lt: ["$age", 65] }, then: "Middle Age" }
          ],
          default: "Senior"
        }
      }
    }
  },
  
  // Stage 3: Group by age group
  {
    $group: {
      _id: "$ageGroup",
      totalPatients: { $sum: 1 },
      avgAge: { $avg: "$age" },
      totalVisits: { $sum: "$visits" },
      conditions: { $push: "$condition" }
    }
  },
  
  // Stage 4: Sort by patient count
  { $sort: { totalPatients: -1 } }
])

✅ AGGREGATION RESULTS:

Age Group Analysis:
  Adult: 2 patients, Avg Age: 30, Total Visits: 9
  Senior: 1 patient, Avg Age: 70, Total Visits: 12
  Middle Age: 1 patient, Avg Age: 45, Total Visits: 8
  Child: 1 patient, Avg Age: 15, Total Visits: 3

📂 GridFS Medical Image Storage:

// Store X-ray image
const bucket = new GridFSBucket(db, {
  bucketName: 'medicalImages',
  chunkSizeBytes: 255 * 1024 // 255KB chunks
});

bucket.upload({
  filename: 'patient_P001_xray_chest.dcm',
  metadata: {
    patientId: 'P001',
    scanType: 'X-Ray',
    bodyPart: 'Chest',
    timestamp: ISODate("2025-01-06"),
    aiAnalysisStatus: 'pending'
  }
});

✅ Image stored in 255KB chunks for efficient streaming

📈 Performance Metrics:
  • Aggregation: 120ms for 100K records
  • GridFS Upload: 2.3s for 50MB DICOM file
  • Sharded Query: 45ms across 10 nodes
  • Change Stream Latency: <100ms

🏥 Real Impact:
  ✓ Analyze millions of patient records in seconds
  ✓ Store unlimited medical images with metadata
  ✓ Real-time dashboards for hospital administrators
  ✓ Predictive analytics for preventive care`
    },

    firebase: {
      title: '🔥 Firebase - Real-time Sync',
      description: 'Real-time healthcare notifications and data synchronization',
      realWorldUse: [
        '⚡ Real-time patient monitoring - vital signs updates',
        '🚨 Emergency alerts - instant notifications to on-call doctors',
        '💬 Doctor-patient messaging - HIPAA-compliant chat',
        '📱 Mobile app sync - offline support with automatic sync'
      ],
      concepts: [
        'Firestore Real-time Listeners - onSnapshot() for live data',
        'Cloud Functions - Server-side logic & triggers',
        'Firebase Cloud Messaging - Push notifications',
        'Security Rules - Fine-grained access control'
      ],
      demo: `=== FIREBASE REAL-TIME HEALTHCARE ===

📊 Firestore Data Model:

patients/{patientId}
  ├─ personalInfo: { name, age, insurance }
  ├─ vitalSigns: { bp, hr, temp, timestamp }
  ├─ medications: [ {...}, {...} ]
  └─ appointments: [ {...}, {...} ]

🔄 Real-time Patient Monitoring:

// Setup real-time listener
const unsubscribe = onSnapshot(
  doc(db, 'patients', 'P001'),
  (snapshot) => {
    const data = snapshot.data();
    const vitals = data.vitalSigns;
    
    // Check for critical conditions
    if (vitals.systolic > 180 || vitals.diastolic > 110) {
      // Trigger emergency alert
      sendEmergencyAlert({
        type: 'CRITICAL',
        message: 'Severe Hypertension Detected',
        patientId: 'P001',
        vitals: vitals
      });
    }
    
    // Update dashboard in real-time
    updateDashboard(data);
  }
);

✅ Live Monitoring Active:
  📍 Patient P001 - Monitoring active
  📊 BP: 140/90, HR: 85, Temp: 98.6°F
  ✅ All vitals within normal range
  ⚡ Last update: 2 seconds ago

🚨 Emergency Alert System:

exports.sendEmergencyAlert = functions.firestore
  .document('alerts/{alertId}')
  .onCreate(async (snap, context) => {
    const alert = snap.data();
    
    // Send to on-call doctor
    await admin.messaging().send({
      token: doctorDeviceToken,
      notification: {
        title: '🚨 CRITICAL ALERT',
        body: \`Patient \${alert.patientId}: \${alert.message}\`
      },
      data: {
        type: 'emergency',
        patientId: alert.patientId,
        vitals: JSON.stringify(alert.vitals)
      }
    });
    
    // Log to audit trail
    await db.collection('auditLogs').add({
      event: 'emergency_alert_sent',
      timestamp: FieldValue.serverTimestamp(),
      ...alert
    });
  });

✅ Alert Sent:
  📱 Dr. Smith notified
  ⏱️ Response time: 1.2 seconds
  ✓ Audit log created

🤖 AI Analysis Integration:

exports.analyzeM edicalScan = functions.https.onCall(
  async (data, context) => {
    const { scanId, scanType, patientId } = data;
    
    // Get scan image from Storage
    const imageUrl = await storage
      .bucket()
      .file(\`scans/\${scanId}.dcm\`)
      .getSignedUrl();
    
    // Call AI model
    const aiResult = await aiModel.analyze({
      imageUrl,
      scanType,
      priority: 'high'
    });
    
    // Store results
    await db.collection('aiAnalysisResults').add({
      scanId,
      patientId,
      scanType,
      findings: aiResult.findings,
      confidence: aiResult.confidence,
      timestamp: FieldValue.serverTimestamp(),
      status: 'completed'
    });
    
    return { success: true, analysisId: result.id };
  }
);

✅ AI Analysis Complete:
  🔍 Scan Type: Chest X-Ray
  🧠 Processing Time: 2.3 seconds
  ✓ Findings: No acute abnormalities
  📊 Confidence: 96.8%

📈 Performance Metrics:
  • Real-time Latency: 45-120ms
  • Cloud Function Cold Start: 1.2s
  • Cloud Function Warm: 95ms
  • Push Notification Delivery: 2.1s avg
  • Offline Sync: Automatic on reconnect

🏥 Real Impact:
  ✓ Instant alerts save lives in emergencies
  ✓ Doctors access patient data from anywhere
  ✓ Real-time collaboration between specialists
  ✓ Mobile apps work offline, sync automatically`
    }
  };
